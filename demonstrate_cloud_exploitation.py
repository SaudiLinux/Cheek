#!/usr/bin/env python3
"""
Cloud Exploitation Demonstration Tool
A comprehensive demonstration of cloud security testing capabilities
"""

import json
import argparse
import datetime
import sys
import os
from typing import Dict, List, Optional, Any
import subprocess
import time

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from exploits.cloud_exploits import CloudExploits
except ImportError as e:
    print(f"Import error: {e}")
    print("Make sure cloud_exploits module is available")
    sys.exit(1)

class CloudExploitationDemo:
    """
    Comprehensive cloud exploitation demonstration tool
    """
    
    def __init__(self, target: str, output_dir: str = "reports"):
        self.target = target
        self.output_dir = output_dir
        self.cloud_exploits = CloudExploits(target)
        self.demo_scenarios = self._load_demo_scenarios()
        
        # Create output directory
        os.makedirs(output_dir, exist_ok=True)
    
    def _load_demo_scenarios(self) -> Dict[str, Any]:
        """Load demonstration scenarios"""
        return {
            "aws_s3_exposure": {
                "name": "AWS S3 Bucket Exposure",
                "description": "Demonstrate S3 bucket enumeration and exposure testing",
                "severity": "HIGH",
                "category": "Cloud Storage",
                "simulation": {
                    "vulnerable": True,
                    "findings": [
                        {
                            "type": "s3_bucket_exposure",
                            "bucket_name": f"{self.target}-backup",
                            "issue": "Public read access enabled",
                            "severity": "HIGH",
                            "recommendation": "Disable public access and implement bucket policies"
                        },
                        {
                            "type": "s3_bucket_misconfiguration", 
                            "bucket_name": f"{self.target}-logs",
                            "issue": "List permissions granted to authenticated users",
                            "severity": "MEDIUM",
                            "recommendation": "Restrict bucket permissions to specific IAM roles"
                        }
                    ]
                }
            },
            "azure_blob_exposure": {
                "name": "Azure Blob Storage Exposure",
                "description": "Demonstrate Azure Blob storage enumeration testing",
                "severity": "HIGH", 
                "category": "Cloud Storage",
                "simulation": {
                    "vulnerable": True,
                    "findings": [
                        {
                            "type": "azure_blob_exposure",
                            "container_name": f"{self.target}-data",
                            "issue": "Public container access enabled",
                            "severity": "HIGH",
                            "recommendation": "Set container access level to private"
                        }
                    ]
                }
            },
            "gcp_storage_exposure": {
                "name": "GCP Cloud Storage Exposure", 
                "description": "Demonstrate Google Cloud Storage enumeration testing",
                "severity": "HIGH",
                "category": "Cloud Storage",
                "simulation": {
                    "vulnerable": False,
                    "findings": []
                }
            },
            "kubernetes_exposure": {
                "name": "Kubernetes API Exposure",
                "description": "Demonstrate Kubernetes cluster security testing",
                "severity": "CRITICAL",
                "category": "Container Orchestration",
                "simulation": {
                    "vulnerable": True,
                    "findings": [
                        {
                            "type": "kubernetes_api_exposure",
                            "endpoint": f"https://{self.target}:6443",
                            "issue": "Kubernetes API server exposed without authentication",
                            "severity": "CRITICAL",
                            "recommendation": "Enable RBAC and implement network policies"
                        },
                        {
                            "type": "kubernetes_dashboard_exposure",
                            "endpoint": f"https://{self.target}:30000",
                            "issue": "Kubernetes dashboard accessible without authentication",
                            "severity": "HIGH",
                            "recommendation": "Disable dashboard or implement proper authentication"
                        }
                    ]
                }
            },
            "docker_daemon_exposure": {
                "name": "Docker Daemon Exposure",
                "description": "Demonstrate Docker daemon security testing",
                "severity": "CRITICAL",
                "category": "Container Runtime",
                "simulation": {
                    "vulnerable": True,
                    "findings": [
                        {
                            "type": "docker_daemon_exposure",
                            "endpoint": f"tcp://{self.target}:2375",
                            "issue": "Docker daemon exposed without TLS authentication",
                            "severity": "CRITICAL",
                            "recommendation": "Enable TLS authentication and restrict network access"
                        }
                    ]
                }
            },
            "cloud_api_exposure": {
                "name": "Cloud API Key Exposure",
                "description": "Demonstrate cloud API key and secret scanning",
                "severity": "HIGH",
                "category": "Secrets Management",
                "simulation": {
                    "vulnerable": True,
                    "findings": [
                        {
                            "type": "aws_access_key_exposure",
                            "issue": "AWS Access Key ID found in public repository",
                            "key_id": "AKIAIOSFODNN7EXAMPLE",
                            "severity": "HIGH",
                            "recommendation": "Revoke exposed keys and implement secret scanning"
                        },
                        {
                            "type": "github_token_exposure", 
                            "issue": "GitHub personal access token found in code",
                            "token_prefix": "ghp_",
                            "severity": "HIGH",
                            "recommendation": "Revoke exposed token and implement code scanning"
                        }
                    ]
                }
            }
        }
    
    def run_demo_scenario(self, scenario_name: str) -> Dict[str, Any]:
        """Run a specific demonstration scenario"""
        if scenario_name not in self.demo_scenarios:
            return {"error": f"Scenario '{scenario_name}' not found"}
        
        scenario = self.demo_scenarios[scenario_name]
        print(f"üéØ Running scenario: {scenario['name']}")
        print(f"üìã Description: {scenario['description']}")
        print(f"‚ö†Ô∏è  Severity: {scenario['severity']}")
        print(f"üè∑Ô∏è  Category: {scenario['category']}")
        
        # Simulate scan execution
        print(f"üîç Scanning {self.target} for {scenario['name']}...")
        time.sleep(2)  # Simulate scan time
        
        simulation = scenario['simulation']
        
        if simulation['vulnerable']:
            print(f"‚ùå VULNERABILITIES FOUND!")
            for finding in simulation['findings']:
                print(f"   üî¥ {finding['type']}: {finding['issue']}")
                print(f"   üí° Recommendation: {finding['recommendation']}")
        else:
            print(f"‚úÖ No vulnerabilities found")
        
        return {
            "scenario": scenario_name,
            "name": scenario['name'],
            "description": scenario['description'],
            "severity": scenario['severity'],
            "category": scenario['category'],
            "results": simulation,
            "scan_time": 2.0,
            "timestamp": datetime.datetime.now().isoformat()
        }
    
    def run_all_scenarios(self) -> List[Dict[str, Any]]:
        """Run all demonstration scenarios"""
        print(f"üöÄ Starting comprehensive cloud exploitation demonstration for {self.target}")
        print("="*70)
        
        results = []
        
        for scenario_name in self.demo_scenarios.keys():
            print(f"\n{'='*50}")
            result = self.run_demo_scenario(scenario_name)
            results.append(result)
            print(f"{'='*50}")
        
        return results
    
    def run_real_scan(self) -> Dict[str, Any]:
        """Run actual cloud exploitation scan"""
        print(f"üîç Running real cloud exploitation scan for {self.target}")
        print("‚ö†Ô∏è  This will perform actual security testing")
        
        start_time = time.time()
        
        try:
            # Run the actual cloud exploitation
            self.cloud_exploits.run_all_exploits()
            
            # Get results (this might be stored in the object)
            findings = getattr(self.cloud_exploits, 'findings', [])
            
            execution_time = time.time() - start_time
            
            return {
                "scan_type": "real_cloud_exploitation",
                "target": self.target,
                "findings": findings,
                "findings_count": len(findings),
                "execution_time": execution_time,
                "status": "COMPLETED",
                "timestamp": datetime.datetime.now().isoformat()
            }
            
        except Exception as e:
            execution_time = time.time() - start_time
            return {
                "scan_type": "real_cloud_exploitation", 
                "target": self.target,
                "findings": [],
                "findings_count": 0,
                "execution_time": execution_time,
                "status": "FAILED",
                "error": str(e),
                "timestamp": datetime.datetime.now().isoformat()
            }
    
    def generate_report(self, results: List[Dict[str, Any]], scan_type: str = "demo") -> str:
        """Generate comprehensive report"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"cloud_exploitation_{scan_type}_report_{self.target}_{timestamp}.json"
        report_path = os.path.join(self.output_dir, report_filename)
        
        # Calculate statistics
        total_scenarios = len(results)
        vulnerable_scenarios = sum(1 for r in results if r.get("results", {}).get("vulnerable", False))
        total_findings = sum(len(r.get("results", {}).get("findings", [])) for r in results if r.get("results"))
        
        # Severity breakdown
        severity_counts = {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0, "LOW": 0, "INFO": 0}
        
        for result in results:
            if result.get("results") and result["results"].get("findings"):
                for finding in result["results"]["findings"]:
                    severity = finding.get("severity", "INFO")
                    severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        report = {
            "report_metadata": {
                "target": self.target,
                "scan_type": scan_type,
                "report_generated": datetime.datetime.now().isoformat(),
                "scanner_version": "2.0.0",
                "total_execution_time": sum(r.get("scan_time", 0) for r in results)
            },
            "summary": {
                "total_scenarios_tested": total_scenarios,
                "vulnerable_scenarios": vulnerable_scenarios,
                "total_findings": total_findings,
                "severity_breakdown": severity_counts,
                "risk_assessment": self._assess_risk(severity_counts)
            },
            "detailed_results": results,
            "recommendations": self._generate_recommendations(results),
            "next_steps": self._generate_next_steps(vulnerable_scenarios, severity_counts)
        }
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìä Report saved to: {report_path}")
        return report_path
    
    def _assess_risk(self, severity_counts: Dict[str, int]) -> Dict[str, Any]:
        """Assess overall risk level"""
        critical = severity_counts.get("CRITICAL", 0)
        high = severity_counts.get("HIGH", 0)
        medium = severity_counts.get("MEDIUM", 0)
        
        if critical > 0:
            risk_level = "CRITICAL"
            risk_score = 90 + min(critical * 5, 10)
        elif high > 0:
            risk_level = "HIGH"
            risk_score = 70 + min(high * 5, 20)
        elif medium > 0:
            risk_level = "MEDIUM"
            risk_score = 40 + min(medium * 3, 30)
        else:
            risk_level = "LOW"
            risk_score = 10
        
        return {
            "risk_level": risk_level,
            "risk_score": min(risk_score, 100),
            "critical_count": critical,
            "high_count": high,
            "medium_count": medium
        }
    
    def _generate_recommendations(self, results: List[Dict[str, Any]]) -> List[Dict[str, str]]:
        """Generate security recommendations"""
        recommendations = []
        
        for result in results:
            if result.get("results", {}).get("vulnerable", False):
                findings = result.get("results", {}).get("findings", [])
                for finding in findings:
                    recommendations.append({
                        "priority": finding.get("severity", "MEDIUM"),
                        "category": result.get("category", "General"),
                        "issue": finding.get("issue", "Unknown issue"),
                        "recommendation": finding.get("recommendation", "Implement security best practices")
                    })
        
        return recommendations
    
    def _generate_next_steps(self, vulnerable_scenarios: int, severity_counts: Dict[str, int]) -> List[str]:
        """Generate next steps for remediation"""
        next_steps = []
        
        if severity_counts.get("CRITICAL", 0) > 0:
            next_steps.extend([
                "IMMEDIATE ACTION REQUIRED: Address all CRITICAL findings",
                "Implement emergency response procedures",
                "Conduct immediate security assessment",
                "Consider temporary service isolation if necessary"
            ])
        
        if severity_counts.get("HIGH", 0) > 0:
            next_steps.extend([
                "Prioritize HIGH severity findings for immediate remediation",
                "Implement additional monitoring and alerting",
                "Review and update security policies"
            ])
        
        if vulnerable_scenarios > 0:
            next_steps.extend([
                "Conduct comprehensive security review of all cloud resources",
                "Implement automated security scanning in CI/CD pipeline",
                "Regular security assessments and penetration testing",
                "Security awareness training for development and operations teams"
            ])
        
        # Always include these
        next_steps.extend([
            "Implement continuous security monitoring",
            "Regular vulnerability assessments",
            "Keep all systems and dependencies updated",
            "Follow cloud security best practices and compliance frameworks"
        ])
        
        return next_steps
    
    def print_summary(self, results: List[Dict[str, Any]]):
        """Print a summary of the demonstration"""
        print("\n" + "="*70)
        print("üå©Ô∏è CLOUD EXPLOITATION DEMONSTRATION SUMMARY")
        print("="*70)
        
        total_scenarios = len(results)
        vulnerable_scenarios = sum(1 for r in results if r.get("results", {}).get("vulnerable", False))
        total_findings = sum(len(r.get("results", {}).get("findings", [])) for r in results if r.get("results"))
        
        print(f"üéØ Target: {self.target}")
        print(f"üìä Total Scenarios Tested: {total_scenarios}")
        print(f"‚ùå Vulnerable Scenarios: {vulnerable_scenarios}")
        print(f"üîç Total Findings: {total_findings}")
        
        # Severity breakdown
        severity_counts = {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0, "LOW": 0, "INFO": 0}
        for result in results:
            if result.get("results") and result["results"].get("findings"):
                for finding in result["results"]["findings"]:
                    severity = finding.get("severity", "INFO")
                    severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        if total_findings > 0:
            print(f"\nüìà Severity Breakdown:")
            for severity, count in severity_counts.items():
                if count > 0:
                    print(f"   {severity}: {count}")
        
        print(f"\nüéØ Risk Assessment:")
        risk_assessment = self._assess_risk(severity_counts)
        print(f"   Risk Level: {risk_assessment['risk_level']}")
        print(f"   Risk Score: {risk_assessment['risk_score']}/100")
        
        print(f"\nüí° Key Recommendations:")
        recommendations = self._generate_recommendations(results)
        for i, rec in enumerate(recommendations[:3], 1):
            print(f"   {i}. [{rec['priority']}] {rec['recommendation']}")
        
        print("\n" + "="*70)

def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description="Cloud Exploitation Demonstration Tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python demonstrate_cloud_exploitation.py example.com
  python demonstrate_cloud_exploitation.py example.com --scenario aws_s3_exposure
  python demonstrate_cloud_exploitation.py example.com --all-scenarios
  python demonstrate_cloud_exploitation.py example.com --real-scan
  python demonstrate_cloud_exploitation.py example.com --demo --output-dir custom_reports
        """
    )
    
    parser.add_argument("target", help="Target domain or IP address")
    parser.add_argument("--scenario", 
                       help="Run specific scenario",
                       choices=["aws_s3_exposure", "azure_blob_exposure", "gcp_storage_exposure", 
                               "kubernetes_exposure", "docker_daemon_exposure", "cloud_api_exposure"])
    parser.add_argument("--all-scenarios", 
                       action="store_true",
                       help="Run all demonstration scenarios")
    parser.add_argument("--real-scan", 
                       action="store_true",
                       help="Run actual cloud exploitation scan")
    parser.add_argument("--demo", 
                       action="store_true", 
                       help="Run in demo mode (default)")
    parser.add_argument("--output-dir", 
                       help="Output directory for reports",
                       default="reports")
    parser.add_argument("--verbose", 
                       action="store_true",
                       help="Enable verbose output")
    
    args = parser.parse_args()
    
    print(f"üå©Ô∏è Cloud Exploitation Demonstration Tool")
    print(f"üéØ Target: {args.target}")
    print(f"üìÅ Output Directory: {args.output_dir}")
    
    try:
        # Initialize demo tool
        demo = CloudExploitationDemo(args.target, args.output_dir)
        
        results = []
        
        if args.real_scan:
            print(f"üîç Running real cloud exploitation scan...")
            result = demo.run_real_scan()
            results.append(result)
            report_path = demo.generate_report(results, "real")
            
        elif args.scenario:
            print(f"üéØ Running specific scenario: {args.scenario}")
            result = demo.run_demo_scenario(args.scenario)
            results.append(result)
            report_path = demo.generate_report(results, "single")
            
        elif args.all_scenarios:
            print(f"üöÄ Running all demonstration scenarios...")
            results = demo.run_all_scenarios()
            report_path = demo.generate_report(results, "comprehensive")
            
        else:
            # Default to demo mode with all scenarios
            print(f"üéÆ Running demonstration mode...")
            results = demo.run_all_scenarios()
            report_path = demo.generate_report(results, "demo")
        
        # Print summary
        if results:
            demo.print_summary(results)
        
        print(f"‚úÖ Cloud exploitation demonstration completed!")
        print(f"üìä Report saved to: {report_path}")
        
        return 0
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è  Demonstration interrupted by user")
        return 1
    except Exception as e:
        print(f"‚ùå Demonstration failed: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())