#!/usr/bin/env python3
"""
اختبار هجومي محدود للتحقق من طرق HTTP الزائدة
Limited HTTP Methods Exploitation Test
"""

import requests
from urllib.parse import urljoin

def test_http_methods_exploit(target_url, endpoint):
    """
    اختبار وجود طرق HTTP زائدة قد تشكل خطراً أمنياً
    """
    print(f"[*] اختبار طرق HTTP الزائدة على: {target_url}{endpoint}")
    
    # قائمة الطرق التي يجب اختبارها
    dangerous_methods = ['PUT', 'DELETE', 'PATCH', 'TRACE', 'CONNECT', 'OPTIONS']
    safe_methods = ['GET', 'POST', 'HEAD']
    all_methods = safe_methods + dangerous_methods
    
    results = {
        'endpoint': endpoint,
        'allowed_methods': [],
        'dangerous_methods': [],
        'vulnerability_verified': False,
        'risk_level': 'Low'
    }
    
    target_full_url = urljoin(target_url, endpoint)
    
    for method in all_methods:
        try:
            print(f"[*] اختبار طريقة {method}...")
            
            if method == 'GET':
                response = requests.get(target_full_url, timeout=10)
            elif method == 'POST':
                response = requests.post(target_full_url, json={'test': 'data'}, timeout=10)
            elif method == 'PUT':
                response = requests.put(target_full_url, json={'test': 'data'}, timeout=10)
            elif method == 'DELETE':
                response = requests.delete(target_full_url, timeout=10)
            elif method == 'PATCH':
                response = requests.patch(target_full_url, json={'test': 'data'}, timeout=10)
            elif method == 'HEAD':
                response = requests.head(target_full_url, timeout=10)
            elif method == 'OPTIONS':
                response = requests.options(target_full_url, timeout=10)
            elif method == 'TRACE':
                response = requests.request('TRACE', target_full_url, timeout=10)
            else:  # CONNECT
                response = requests.request('CONNECT', target_full_url, timeout=10)
            
            # التحقق مما إذا كانت الطريقة مسموحة (استجابة ناجحة أو 405 Method Not Allowed)
            if response.status_code in [200, 201, 202, 204, 400, 401, 403, 404, 405]:
                results['allowed_methods'].append(method)
                
                if method in dangerous_methods:
                    results['dangerous_methods'].append({
                        'method': method,
                        'status_code': response.status_code,
                        'response_headers': dict(response.headers)
                    })
                    
                    if response.status_code in [200, 201, 202, 204]:
                        print(f"[!] ⚠️  طريقة {method} مسموحة (الحالة: {response.status_code}) - خطر عالٍ!")
                    else:
                        print(f"[?] طريقة {method} موجودة (الحالة: {response.status_code}) - خطر متوسط")
                else:
                    print(f"[✓] طريقة {method} مسموحة (الحالة: {response.status_code}) - طبيعي")
            else:
                print(f"[✓] طريقة {method} غير مسموحة (الحالة: {response.status_code})")
                
        except requests.exceptions.RequestException as e:
            print(f"[-] خطأ في اختبار {method}: {e}")
            continue
    
    # تحليل المخاطر
    dangerous_count = len(results['dangerous_methods'])
    if dangerous_count >= 3:
        results['vulnerability_verified'] = True
        results['risk_level'] = 'High'
        print(f"[!] ✅ تم تأكيد وجود طرق HTTP زائدة خطيرة!")
        print(f"[!] عدد الطرق الخطيرة المكتشفة: {dangerous_count}")
        
    elif dangerous_count > 0:
        results['risk_level'] = 'Medium'
        print(f"[?] ⚠️  توجد بعض الطرق التي قد تشكل خطراً: {dangerous_count}")
        
    else:
        print(f"[✓] ✅ لا توجد طرق HTTP زائدة خطيرة")
    
    return results

def test_special_headers_exploit(target_url, endpoint):
    """
    اختبار رؤوس خاصة مثل X-HTTP-Method-Override
    """
    print(f"[*] اختبار رؤوس تجاوز الطريقة على: {target_url}{endpoint}")
    
    target_full_url = urljoin(target_url, endpoint)
    override_headers = [
        ('X-HTTP-Method-Override', 'DELETE'),
        ('X-HTTP-Method', 'PUT'),
        ('X-Method-Override', 'PATCH'),
        ('_method', 'DELETE')
    ]
    
    override_results = []
    
    for header_name, header_value in override_headers:
        try:
            headers = {header_name: header_value}
            response = requests.post(target_full_url, headers=headers, json={'test': 'data'}, timeout=10)
            
            # إذا تمت معالجة الطلب كطريقة مختلفة (DELETE, PUT, إلخ)
            if response.status_code in [200, 201, 202, 204, 400, 401, 403, 404]:
                override_results.append({
                    'header': header_name,
                    'value': header_value,
                    'status_code': response.status_code,
                    'vulnerable': True
                })
                print(f"[!] ⚠️  تم تجاوز الطريقة باستخدام {header_name}: {header_value} (الحالة: {response.status_code})")
            else:
                print(f"[✓] لم يتم تجاوز الطريقة باستخدام {header_name}")
                
        except requests.exceptions.RequestException as e:
            print(f"[-] خطأ في اختبار {header_name}: {e}")
            continue
    
    return override_results

def main():
    print("=== اختبار استغلال طرق HTTP الزائدة المحدود ===")
    
    # اختبار النقاط النهائية التي تم اكتشافها
    target = "http://httpbin.org"
    endpoints = ["/api/v1", "/api/v2", "/api", "/rest", "/rest/api"]
    
    all_results = []
    all_override_results = []
    
    for endpoint in endpoints:
        print(f"\n{'='*60}")
        result = test_http_methods_exploit(target, endpoint)
        override_result = test_special_headers_exploit(target, endpoint)
        
        all_results.append(result)
        all_override_results.extend(override_result)
        print(f"{'='*60}")
    
    # تقرير نهائي
    print(f"\n{'='*70}")
    print("=== تقرير اختبار طرق HTTP الزائدة النهائي ===")
    
    vulnerable_endpoints = [r for r in all_results if r.get('vulnerability_verified')]
    vulnerable_overrides = [r for r in all_override_results if r.get('vulnerable')]
    
    if vulnerable_endpoints or vulnerable_overrides:
        total_dangerous = sum(len(r['dangerous_methods']) for r in vulnerable_endpoints)
        print(f"[!] ✅ تم تأكيد وجود طرق HTTP زائدة خطيرة:")
        print(f"  • عدد نقاط النهاية المعرضة للخطر: {len(vulnerable_endpoints)}")
        print(f"  • إجمالي الطرق الخطيرة: {total_dangerous}")
        
        if vulnerable_overrides:
            print(f"  • عدد نقاط ضعف تجاوز الطريقة: {len(vulnerable_overrides)}")
            
        print(f"\nتفاصيل الطرق الخطيرة:")
        for endpoint_result in vulnerable_endpoints:
            print(f"  • {endpoint_result['endpoint']}:")
            for method in endpoint_result['dangerous_methods']:
                print(f"    - {method['method']}: {method['status_code']}")
    else:
        print("[✓] ✅ لم يتم تأكيد وجود طرق HTTP زائدة خطيرة قابلة للاستغلال")
        
    return all_results, all_override_results

if __name__ == "__main__":
    main()