#!/usr/bin/env python3
"""
اختبار هجومي محدود للتحقق من ثغرة CORS
Limited CORS Exploitation Test
"""

import requests
import json
from urllib.parse import urljoin

def test_cors_exploit(target_url, endpoint):
    """
    اختبار استغلال ثغرة CORS عن طريق إرسال طلب من أصل خبيث
    """
    print(f"[*] اختبار استغلال CORS على: {target_url}{endpoint}")
    
    # تكوين رؤوس CORS الخبيثة
    malicious_headers = {
        'Origin': 'https://evil.com',
        'Access-Control-Request-Method': 'GET',
        'Access-Control-Request-Headers': 'Content-Type'
    }
    
    try:
        # اختبار طلب OPTIONS (Preflight)
        print(f"[*] اختبار طلب OPTIONS...")
        options_url = urljoin(target_url, endpoint)
        options_response = requests.options(options_url, headers=malicious_headers, timeout=10)
        
        print(f"[+] رد OPTIONS: {options_response.status_code}")
        print(f"[+] رؤوس الرد: {dict(options_response.headers)}")
        
        # اختبار طلب GET مع Origin خبيث
        print(f"[*] اختبار طلب GET مع Origin خبيث...")
        get_response = requests.get(options_url, headers={'Origin': 'https://evil.com'}, timeout=10)
        
        print(f"[+] رد GET: {get_response.status_code}")
        print(f"[+] رؤوس Access-Control: {{")
        for header, value in get_response.headers.items():
            if 'access-control' in header.lower():
                print(f"    {header}: {value}")
        print("}")
        
        # تحليل النتائج
        results = {
            'endpoint': endpoint,
            'options_status': options_response.status_code,
            'get_status': get_response.status_code,
            'cors_headers': {
                'access-control-allow-origin': get_response.headers.get('Access-Control-Allow-Origin', 'Not Found'),
                'access-control-allow-methods': get_response.headers.get('Access-Control-Allow-Methods', 'Not Found'),
                'access-control-allow-headers': get_response.headers.get('Access-Control-Allow-Headers', 'Not Found'),
                'access-control-allow-credentials': get_response.headers.get('Access-Control-Allow-Credentials', 'Not Found')
            },
            'vulnerability_verified': False,
            'exploitability': 'Low'
        }
        
        # التحقق من وجود ثغرة CORS
        allow_origin = get_response.headers.get('Access-Control-Allow-Origin', '')
        if allow_origin == '*' or allow_origin == 'https://evil.com':
            results['vulnerability_verified'] = True
            results['exploitability'] = 'High'
            print(f"[!] ✅ تم تأكيد ثغرة CORS!")
            print(f"[!] يمكن لأي موقع استرداد البيانات من هذا النقطة النهاية")
            
        elif allow_origin:
            results['exploitability'] = 'Medium'
            print(f"[?] ⚠️  CORS محدود ولكنه موجود: {allow_origin}")
            
        else:
            print(f"[✓] ✅ لا توجد ثغرة CORS واضحة")
            
        return results
        
    except Exception as e:
        print(f"[-] خطأ في الاختبار: {e}")
        return {'error': str(e)}

def main():
    print("=== اختبار استغلال CORS المحدود ===")
    
    # اختبار النقاط النهائية التي تم اكتشافها
    target = "http://httpbin.org"
    endpoints = ["/api/v1", "/api/v2", "/api", "/rest", "/rest/api"]
    
    all_results = []
    
    for endpoint in endpoints:
        print(f"\n{'='*50}")
        result = test_cors_exploit(target, endpoint)
        all_results.append(result)
        print(f"{'='*50}")
    
    # تقرير نهائي
    print(f"\n{'='*60}")
    print("=== تقرير اختبار CORS النهائي ===")
    vulnerable_endpoints = [r for r in all_results if r.get('vulnerability_verified')]
    
    if vulnerable_endpoints:
        print(f"[!] ✅ تم تأكيد وجود ثغرة CORS في {len(vulnerable_endpoints)} نقطة نهاية:")
        for vuln in vulnerable_endpoints:
            print(f"  • {vuln['endpoint']} (قابلية الاستغلال: {vuln['exploitability']})")
    else:
        print("[✓] ✅ لم يتم تأكيد وجود ثغرة CORS قابلة للاستغلال")
        
    return all_results

if __name__ == "__main__":
    main()